//#define VERBOSE

using System;
using System.Collections.Generic;
using System.Linq;
using JetBrains.Annotations;
using td.common;
using td.common.level;
using td.monoBehaviours;
using td.states;
using td.utils;
using UnityEngine;

namespace td.services
{
    public class LevelMap
    {
        private uint spawnsLength = 0;
        private uint kernelsLength = 0;

        private Cell[,] cells = new Cell[Constants.Level.MaxMapArrayWidth, Constants.Level.MaxMapArrayHeight];
        private Int2?[] spawns = new Int2?[Constants.Level.MaxSpawns];
        private Int2?[] kernels = new Int2?[Constants.Level.MaxTargets];

        private LevelConfig? levelConfig;
        private readonly LevelState levelState;

        public float CellSize = 0f;

        public LevelConfig? LevelConfig
        {
            get => levelConfig;
            set
            {
                levelConfig = value;
                levelState.MaxLives = levelConfig?.lives ?? 0;
                levelState.Lives = levelState.MaxLives;
                levelState.LevelNumber = levelConfig?.levelNumber ?? 0;
                levelState.Money = levelConfig?.startedMoney ?? 10;
                levelState.NextWaveCountdown = 0;
                levelState.WaveNumber = 0;
                levelState.WaveCount = levelConfig?.waves.Length ?? 0;
            }
        }

        public int Width { get; private set; } = -1;
        public int Height { get; private set; } = -1;

        private Int2 mapOffset = new(0, 0);

        public Int2[] Spawns => spawns.Where(spawn => spawn != null).Select(s => (Int2)s).ToArray();
        public Int2[] Kernels => kernels.Where(target => target != null).Select(s => (Int2)s).ToArray();

        public HightlightGridByCursor GridRenderer { get; set; }

        public LevelMap(LevelState levelState)
        {
            this.levelState = levelState;
        }

        public void Clear()
        {
            levelConfig = null;
            mapOffset = new Int2(0, 0);
            cells = new Cell[Constants.Level.MaxMapArrayWidth, Constants.Level.MaxMapArrayHeight];
            spawns = new Int2?[Constants.Level.MaxSpawns];
            kernels = new Int2?[Constants.Level.MaxTargets];
            spawnsLength = 0;
            kernelsLength = 0;
            Width = -1;
            Height = -1;
            GridRenderer = null;
            CellSize = 0;
            prebuildedCells.Clear();
            minX = 999;
            minY = 999;
            maxX = -999;
            maxY = -999;
        }

//         public void AddCell(Cell cell)
//         {
// #if UNITY_EDITOR && VERBOSE
//             Debug.Log($"AddCell ({cell}) before...");
//             if (cell is HexCell || CellType == LevelCellType.Hex)
//             {
//                 DebugLogHexMap();
//             }
//             else
//             {
//                 DebugLogMap();
//             }
// #endif
//             if (cell.Coords.x < 0 && cell.Coords.x < mapOffset.x)
//             {
//                 var length = (cell.Coords.x * -1);
//                 ShiftMapRight(length + mapOffset.x);
//             }
//
//             if (cell.Coords.y < 0 && cell.Coords.y < mapOffset.y)
//             {
//                 var length = (cell.Coords.y * -1);
//                 ShiftMapTop(length + mapOffset.y);
//             }
//
//             // if (
//             //     cell.Coordinates.x < mapOffset.x ||
//             //     cell.Coordinates.y < mapOffset.y ||
//             //     cell.Coordinates.x + mapOffset.x >= Constants.Level.MaxMapArrayWidth ||
//             //     cell.Coordinates.y + mapOffset.y >= Constants.Level.MaxMapArrayHeight
//             // ) {
//             //     throw new IndexOutOfRangeException(
//             //         $"[{cell.Coordinates.x}; {cell.Coordinates.y}]-[{mapOffset.x}; {mapOffset.y}] - out of map range [{Constants.Level.MaxMapArrayWidth}; {Constants.Level.MaxMapArrayHeight}]"
//             //     );
//             // }
//
//             var oX = cell.Coords.x - mapOffset.x;
//             var oY = cell.Coords.y - mapOffset.y;
//
//             try
//             {
//                 cells[oX, oY] = cell;
//             }
//             catch (Exception e)
//             {
//                 Debug.Log(e);
//             }
//
//             if (Width < oX + 1)
//             {
//                 Width = oX + 2;
//             }
//
//             if (Height < oY + 1)
//             {
//                 Height = oY + 2;
//             }
//
//             if (Width >= Constants.Level.MaxMapArrayWidth || Height >= Constants.Level.MaxMapArrayHeight)
//             {
//                 throw new IndexOutOfRangeException(
//                     $"Map [{Width}; {Height}] - out of map range [{Constants.Level.MaxMapArrayWidth}; {Constants.Level.MaxMapArrayHeight}"
//                 );
//             }
//         }

        private int minX = 999;
        private int minY = 999;
        private int maxX = -999;
        private int maxY = -999;
        private List<Cell> prebuildedCells = new();

        public void AddPreBuildedCell(Cell cell)
        {
            //todo
            prebuildedCells.Add(cell);

            if (minX > cell.Coords.x) minX = cell.Coords.x;
            if (minY > cell.Coords.y) minY = cell.Coords.y;
            if (maxX < cell.Coords.x) maxX = cell.Coords.x;
            if (maxY < cell.Coords.y) maxY = cell.Coords.y;
        }

        public void BuildMap()
        {
            mapOffset = new Int2(minX, minY);
            Width = maxX - minX;
            Height = maxY - minY;

            foreach (var cell in prebuildedCells)
            {
                var oX = cell.Coords.x - mapOffset.x;
                var oY = cell.Coords.y - mapOffset.y;

                cells[oX, oY] = cell;
            }

            prebuildedCells.Clear();
        }

        [CanBeNull]
        public Cell GetCell(int x, int y)
        {
            var oX = x - mapOffset.x;
            var oY = y - mapOffset.y;

            if (oX is < 0 or > (int)Constants.Level.MaxMapArrayWidth ||
                oY is < 0 or > (int)Constants.Level.MaxMapArrayHeight)
            {
                return null;
            }

            return cells[oX, oY];
        }
        public Cell GetCell(Int2 coords) =>
            GetCell(coords.x, coords.y);
        
        public Cell GetCell(Vector2 position) =>
            GetCell(HexGridUtils.PositionToCell(position, CellSize));
        

        // [CanBeNull]
        // public T GetCell<T>(Vector2 vector) where T : class, ICell
        // {
        //     var gridCoordinate = GridUtils.CoordsToCell(vector, CellType, CellSize);
        //     return GetCell<T>(gridCoordinate);
        // }
        //
        // public bool TryGetCell<T>(Vector2 vector, out T cell) where T : class, ICell
        // {
        //     cell = GetCell<T>(vector);
        //     return cell != null;
        // }
        //
        //
        // [CanBeNull]
        // public T GetCell<T>(Int2 position) where T : class, ICell
        // {
        //     return GetCell<T>(position.x, position.y);
        // }
        //
        // public bool TryGetCell<T>(Int2 position, out T cell) where T : class, ICell
        // {
        //     cell = GetCell<T>(position);
        //     return cell != null;
        // }
        //
        //
        // [CanBeNull]
        // public T GetCell<T>(int x, int y) where T : class, ICell
        // {
        //     var cell = GetCell(x, y);
        //     return cell as T;
        // }
        //
        // public bool TryGetCell<T>(int x, int y, out T cell) where T : class, ICell
        // {
        //     cell = GetCell<T>(x, y);
        //     return cell != null;
        // }


        public void AddSpawn(Int2 coords)
        {
            var cell = GetCell(coords);
            if (cell != null)
            {
                cell.spawnNumber = spawnsLength;
                spawns[spawnsLength] = coords;
                spawnsLength++;
            }
        }

        public void AddKernel(Int2 coords)
        {
            var cell = GetCell(coords);
            if (cell != null)
            {
                cell.kernelNumber = kernelsLength;
                kernels[kernelsLength] = coords;
                kernelsLength++;
            }
        }

        //////////////////////////////////////////////////////////////////////////////
//         private void ShiftMapRight(int length)
//         {
//             mapOffset = new Int2(mapOffset.x - length, mapOffset.y);
//
//             for (var y = 0; y < (int)Constants.Level.MaxMapArrayHeight; y++)
//             {
//                 for (var x = (int)Constants.Level.MaxMapArrayWidth - length - 1; x >= 0; x--)
//                 {
//                     cells[x + length, y] = cells[x, y];
//                     cells[x, y] = null;
//                 }
//             }
//
// #if UNITY_EDITOR
//             // Debug.Log($@"After ShiftMapRight {length}");
//             // DebugLogMap();
// #endif
//         }
//
//         private void ShiftMapTop(int length)
//         {
//             mapOffset = new Int2(mapOffset.x, mapOffset.y - length);
//
//             for (var y = length; y < (int)Constants.Level.MaxMapArrayHeight; y++)
//             {
//                 for (var x = (int)Constants.Level.MaxMapArrayWidth - 1; x >= 0; x--)
//                 {
//                     cells[x, y - length] = cells[x, y];
//                     cells[x, y] = null;
//                 }
//             }
//
// #if UNITY_EDITOR
//             // Debug.Log($@"After ShiftMapTop {length}");
//             // DebugLogMap();
// #endif
//         }

        public void DebugLogHexMap()
        {
            var xFrom = mapOffset.x;
            var xTo = Width + mapOffset.x;

            var yFrom = Height + mapOffset.y;
            var yTo = mapOffset.y;

            var result = "";

            for (var y = yFrom; y >= yTo; y--)
            {
                var up = "";
                var down = "";

                for (var x = xFrom; x <= xTo; x++)
                {
                    var cell = GetCell(x, y);
                    if (x % 2 == 0)
                    {
                        up += x == xFrom ? "__" : "_";
                        down += "<" + FormatCell(cell) + '>';
                    }
                    else
                    {
                        up += "<" + FormatCell(cell) + '>';
                        down += x == xFrom ? "__" : "_";
                    }
                }

                result += up + "\n" + down + "\n";
            }

            Debug.Log(result);
        }

        // public void DebugLog()
        // {
        //     if (CellType == LevelCellType.Hex)
        //     {
        //         DebugLogHexMap();
        //     }
        //     else
        //     {
        //         DebugLogMap();
        //     }
        // }
        //
        // private void DebugLogMap()
        // {
        //     var line = "GetCell:\n";
        //
        //     var xFrom = mapOffset.x;
        //     var xTo = Width + mapOffset.x - 1;
        //
        //     var yFrom = Height + mapOffset.y - 1;
        //     var yTo = mapOffset.y;
        //
        //     line += $"X: {xFrom}...{xTo}\n";
        //     line += $"Y: {yFrom}...{yTo}\n";
        //
        //     for (var y = yFrom; y >= yTo; y--)
        //     {
        //         line += Math.Abs(y).ToString("D2") + ": ";
        //         for (var x = xFrom; x <= xTo; x++)
        //         {
        //             line += FormatCell(GetCell(x, y));
        //         }
        //
        //         line += '\n';
        //     }
        //
        //     //////////////////////////////////////////
        //
        //     line += "\n\n---------------------------------------\n\nFrom array:\n";
        //     line += $"X: {0}...{Width - 1}\n";
        //     line += $"Y: {Height - 1}...{0}\n";
        //     for (var y = Height - 1; y >= 0; y--)
        //     {
        //         line += Math.Abs(y).ToString("D2") + ": ";
        //         for (var x = 0; x < Width; x++)
        //         {
        //             line += FormatCell(cells[x, y]);
        //         }
        //
        //         line += '\n';
        //     }
        //
        //     Debug.Log(line);
        // }

        private static char FormatCell(Cell cell)
        {
            if (cell == null)
            {
                return '□';
            }

            if (cell.type == CellTypes.CanWalk)
            {
                if (cell.isKernel)
                {
                    return 'K';
                }

                if (cell.isSpawn)
                {
                    return 'S';
                }

                if (cell.isSwitcher)
                {
                    return '⟏';
                }
                
                return '■';
            }

            if (cell.type == CellTypes.CanBuild)
            {
                return '+';
            }

            return ' ';
        }
    }
}