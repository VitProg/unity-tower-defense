using System;
using Leopotam.EcsLite;
using td.utils;
using td.utils.ecs;

// This is AutoGenerated file!
namespace td.features.state
{
    [Serializable]
    public abstract class StateBase : IState
    {
        [InjectSystems] protected IEcsSystems systems = default;
        protected bool eventsSuspended;

        protected float maxLives;
        public float MaxLives
        {
            get => maxLives;
            set
            {
                if (FloatUtils.IsEquals(maxLives, value)) return;
                maxLives = value;
                if (!eventsSuspended) systems.Outer<StateChangedEvent>().maxLives = true;
            }
        }

        protected float lives;
        public float Lives
        {
            get => lives;
            set
            {
                if (FloatUtils.IsEquals(lives, value)) return;
                lives = value;
                if (!eventsSuspended) systems.Outer<StateChangedEvent>().lives = true;
            }
        }

        protected uint levelNumber;
        public uint LevelNumber
        {
            get => levelNumber;
            set
            {
                if (levelNumber == value) return;
                levelNumber = value;
                if (!eventsSuspended) systems.Outer<StateChangedEvent>().levelNumber = true;
            }
        }

        protected int money;
        public int Money
        {
            get => money;
            set
            {
                if (money == value) return;
                money = value;
                if (!eventsSuspended) systems.Outer<StateChangedEvent>().money = true;
            }
        }

        protected float nextWaveCountdown;
        public float NextWaveCountdown
        {
            get => nextWaveCountdown;
            set
            {
                if (FloatUtils.IsEquals(nextWaveCountdown, value)) return;
                nextWaveCountdown = value;
                if (!eventsSuspended) systems.Outer<StateChangedEvent>().nextWaveCountdown = true;
            }
        }

        protected int waveNumber;
        public int WaveNumber
        {
            get => waveNumber;
            set
            {
                if (waveNumber == value) return;
                waveNumber = value;
                if (!eventsSuspended) systems.Outer<StateChangedEvent>().waveNumber = true;
            }
        }

        protected int waveCount;
        public int WaveCount
        {
            get => waveCount;
            set
            {
                if (waveCount == value) return;
                waveCount = value;
                if (!eventsSuspended) systems.Outer<StateChangedEvent>().waveCount = true;
            }
        }

        protected int enemiesCount;
        public int EnemiesCount
        {
            get => enemiesCount;
            set
            {
                if (enemiesCount == value) return;
                enemiesCount = value;
                if (!eventsSuspended) systems.Outer<StateChangedEvent>().enemiesCount = true;
            }
        }
        
        protected float gameSpeed;
        public float GameSpeed
        {
            get => gameSpeed;
            set
            {
                if (FloatUtils.IsEquals(gameSpeed,value)) return;
                gameSpeed = value;
                if (!eventsSuspended) systems.Outer<StateChangedEvent>().gameSpeed = true;
            }
        }

        protected bool isBuildingProcess;
        public bool IsBuildingProcess
        {
            get => isBuildingProcess;
            set
            {
                if (isBuildingProcess == value) return;
                isBuildingProcess = value;
                if (!eventsSuspended) systems.Outer<StateChangedEvent>().isBuildingProcess = true;
            }
        }

        public void SuspendEvents() => eventsSuspended = true;
        public void ResumeEvents() => eventsSuspended = false;

        public void Refresh() {
            eventsSuspended = false;
            ref var e = ref systems.Outer<StateChangedEvent>();
            e.maxLives = true;
            e.lives = true;
            e.levelNumber = true;
            e.money = true;
            e.nextWaveCountdown = true;
            e.waveNumber = true;
            e.waveCount = true;
            e.enemiesCount = true;
            e.isBuildingProcess = true;
        }

        public void Clear() {
            maxLives = default;
            lives = default;
            levelNumber = default;
            money = default;
            nextWaveCountdown = default;
            waveNumber = default;
            waveCount = default;
            enemiesCount = default;
            gameSpeed = 1f;
            isBuildingProcess = default;
        }
    }
}