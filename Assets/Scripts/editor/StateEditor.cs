// using System;
// using System.IO;
// using System.Text;
// using td.features.state;
// using UnityEditor;
// using UnityEngine;
//
// namespace td.editor
// {
//     public class StateEditor : ScriptableObject
//     {
//         [MenuItem("TD/Regenerate State Superstructures", false, -200)]
//         public static void RegenerateStateSuperstructure()
//         {
//             var stateType = typeof(IState);
//
//             var stateFields = new StringBuilder();
//             var stateRefresh = new StringBuilder();
//             var stateClear = new StringBuilder();
//             var eventFields = new StringBuilder();
//
//             foreach (var field in stateType.GetMethods())
//             {
//                 var type = field.ReturnType;
//                 var typeString = type.Name;
//                 var name = field.Name;
//
//                 if (!name.StartsWith("get_")) continue;
//
//                 if (type.IsGenericType)
//                 {
//                     typeString = typeString.Replace("`1", $"<{(type.GenericTypeArguments[0]?.Name ?? "void")}>");
//                 }
//
//                 name = name.Substring(4, 1).ToLower() + name[5..];
//                 
//                 var camelCase = name[..1].ToUpper() + name[1..];
//
//                 typeString = typeString.Replace("String", "string");
//                 typeString = typeString.Replace("Single", "float");
//                 typeString = typeString.Replace("Double", "double");
//                 typeString = typeString.Replace("UInt16", "ushort");
//                 typeString = typeString.Replace("Int16", "short");
//                 typeString = typeString.Replace("UInt32", "uint");
//                 typeString = typeString.Replace("Int32", "int");
//                 typeString = typeString.Replace("SByte", "sbyte");
//                 typeString = typeString.Replace("Byte", "byte");
//                 typeString = typeString.Replace("Boolean", "bool");
//                 typeString = typeString.Replace("Void", "void");
//                 
//                 stateRefresh.Append($"\n            e.{name} = true;");
//                 stateClear.Append($"\n            {name} = default;");
//
//                 eventFields.Append($"\n        public bool? {name};");
//
//                 stateFields.Append(@$"
//         protected {typeString} {name};
//         public {typeString} {camelCase}
//         {{
//             get => {name};
//             set
//             {{
//                 {(type == typeof(float) ? $"if (FloatUtils.IsEquals({name}, value)) return;" : $"if ({name} == value) return;")}
//                 {name} = value;
//                 if (!eventsSuspended) systems.Outer<StateChangedEvent>().{name} = true;
//             }}
//         }}
// ");
//             }
//
//             var stateCode = @$"using System;
// using System.Collections.Generic;
// using Leopotam.EcsLite;
// using td.features.shard;
// using td.utils;
// using td.utils.ecs;
//
// // This is AutoGenerated file!
// namespace td.features.state
// {{
//     [Serializable]
//     public abstract class StateBase : IState
//     {{
//         [InjectSystems] protected IEcsSystems systems = default;
//         protected bool eventsSuspended;
// {stateFields}
//         public void SuspendEvents() => eventsSuspended = true;
//         public void ResumeEvents() => eventsSuspended = false;
//
//         public void Refresh() {{
//             eventsSuspended = false;
//             ref var e = ref systems.Outer<StateChangedEvent>();{stateRefresh}
//         }}
//
//         public void Clear() {{{stateClear}
//         }}
//     }}
// }}";
//             
//             var eventCode = $@"// This is AutoGenerated file!
// namespace td.features.state
// {{
//     public struct StateChangedEvent
//     {{{eventFields}
//     }}
// }}";
// // Debug.Log(stateCode);
// // Debug.Log(eventCode);
//             WriteFile("Assets/Scripts/features/state/StateBase.cs", stateCode);
//             WriteFile("Assets/Scripts/features/state/StateChangedEvent.cs", eventCode);
//             
//             Debug.Log("Assets/Scripts/features/state/StateBase.cs - genereted");
//             Debug.Log("Assets/Scripts/features/state/StateChangedEvent.cs - genereted");
//         }
//
//         protected static void WriteFile(string filePath, string data)
//         {
//             if (File.Exists(filePath))
//             {
//                 File.WriteAllText(filePath, data);
//             }
//             else
//             {
//                 var path = AssetDatabase.GenerateUniqueAssetPath(filePath);
//                 File.WriteAllText(path, data);
//             }
//         }
//     }
// }